import type { Fn2 } from "@thi.ng/api";
import type {
	IWasmMemoryAccess,
	WasmTypeBase,
	WasmTypeConstructor,
} from "./api.js";
import { __instanceArray } from "./memory.js";

/**
 * Shared construction helper for types generated by
 * [thi.ng/wasm-api-bindgen](https://thi.ng/wasm-api-bindgen).
 *
 * @param align
 * @param size
 * @param instance
 */
export const defType =
	<T extends WasmTypeBase>(
		align: number,
		size: number,
		instance: Fn2<IWasmMemoryAccess, number, Omit<T, keyof WasmTypeBase>>
	): WasmTypeConstructor<T> =>
	(mem) => ({
		get align() {
			return align;
		},
		get size() {
			return size;
		},
		instanceArray(base, num) {
			return __instanceArray<T>(this, base, num);
		},
		instance: (base) =>
			<T>{
				get __base() {
					return base;
				},
				get __bytes() {
					return mem.u8.subarray(base, base + size);
				},
				...instance(mem, base),
			},
	});
